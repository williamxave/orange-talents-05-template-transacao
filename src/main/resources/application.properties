spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${MYSQL_DATABASE: jdbc:mysql://localhost:3306/api_transacao?createDatabaseIfNotExist=true&serverTimezone=UTC}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:}
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true
spring.jpa.hibernate.format_sql=true


##Kafka##
# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:api-william-transaction}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}

spring.kafka.topic.transacoes=${KAFKA_TOPIC:transacoes}

spring.kafka.host=${KAFKA_HOST:http://localhost:9092}

##Keycloak##
## spring security resource server configuration
## nos ajuda a informar onde o Spring Security pode encontrar nosso authorization server. Essa informação é muito importante!
## Endereco do maravilindo keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/transacoes}

##indicamos onde o Spring Security pode encontrar as chaves para conseguir validar a assinatura do token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/transacoes/protocol/openid-connect/certs}


